#Ветвление

a = 1
b = 2

if a > b:
	 #pass - если нужно пропустить неоконченный код (пустой блок)
	 print('a > b')
elif a == b:
	print('a = b')
else:
	print('a < b')

#Тернальные операторы

flag = True
if flag:
	v = 5
else:
	v = 'hello' #или это всё можно записать короче

v = 5 if flag else 'hello'

v = 5 if flag else 'hello' if True else 666 #так лучше не делать, сложно читать

#Циклы

i = 1
summa = 0

while i < 10:
	summa += i
	i += 1

print(summa)

#итерация - один проход цикла
#итерацию можно досрочно завершить оператором break или пропустить итерацию оператором continue
i = 1
while i:
	if i == 10:
		break #прервать цикл
	elif i == 0
		continue #пропустить цикл
	i += 1

for i in range(10, 20, 2) #range - генерирует чисела, если написать 10, 20 то будет генериться от 10 до 19, третий аргумент это шаг
	print(i, end=', ') #заменяет вывод на любой симмвол

	print('\n\n')

	d = {
		'id': 1,
		'name': 'Linus Torvalds'
	}

for key, value in d.items():
	print(key, value)

#срезы

lst = list(range(1, 20))
lst[4]
5

lst[4:7] #срез от 4-го индекса до 7-го не включительно
[5,6,7]

lst[4:] #границы можно опускать, срез будет от 4-го индекса и до конца

lst[:4] #можно опускать в обе стороны

lst[:] #получаем тоже список

lst[1:11:2] #один написал, один пропустил

lst[::2] #все чётные индексы

lst[1::2] #все нечётные

lst[-5:] #когда считаем с конца мы считаем с единицы

lst[-5::-1] # вывод в обратном порядке

#для строк тоже самое

s = 'Hello, Python'

s[1]
'e'

s[1:5]
'ello'

#строка неизменяемый тип данных, при срезе создаётся новая строка

result = ''

for i in range(10):
	result += str(i) #так никогда не делать (очень медленно)


result = []

for i in range(10):
	result.append(str(i)) # append - добавляет элемент в конец списка, все методы вызываются через точку .append

result = ''.join(result) #список в строку
print(result)


s = list(s) #перевести в список
s[1] = '#' # изменить 
s = ''.join(s) # склеить обратнов строку

